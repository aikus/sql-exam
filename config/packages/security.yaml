security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        token:
            provider: app_user_provider
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: app_api_login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                username_path: email
                password_path: password
        api:
            pattern: ^/api
            stateless: true
            custom_authenticator: App\Security\AppCustomAuthenticator
            entry_point: App\Security\AppCustomAuthenticator
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: login
                check_path: login
            custom_authenticator: App\Security\AppCustomAuthenticator
            entry_point: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_home

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin section high priority
        - { path: ^/admin, roles: ROLE_ADMIN }

        # Public section
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/confirm/password, roles: PUBLIC_ACCESS }

        - { path: ^api/login/$, roles: PUBLIC_ACCESS }
        - { path: ^api/login_check/$, roles: PUBLIC_ACCESS }

        # User section
        - { path: ^/user-change-password, roles: ROLE_USER }

        # Student access
        - { path: ^/question, roles: [ROLE_USER] }
        - { path: ^/answer, roles: [ROLE_USER] }
        - { path: ^/answer/+/start, roles: [ROLE_USER] }
        - { path: ^/answer/+/new, roles: [ROLE_USER] }

        # Teacher access
        - { path: ^/check/answer/, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/answer/+/edit, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/exam, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: POST}
        - { path: ^/exam/+/new, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/exam/+/edit, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/examination_sheet, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: POST}
        - { path: ^/examination_sheet/+/new, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/examination_sheet/+/edit, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/question, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: POST}
        - { path: ^/question/+/new, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/question/+/edit, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/user, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: POST}
        - { path: ^/user/+/new, roles: [ROLE_TEACHER, ROLE_ADMIN] }
        - { path: ^/user/+/edit, roles: [ROLE_TEACHER, ROLE_ADMIN] }

        - { path: ^/, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argonpossible value for argon
